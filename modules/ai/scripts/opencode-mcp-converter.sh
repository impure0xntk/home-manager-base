#!/usr/bin/env bash

# MCP Configuration Converter Tool
# Converts MCP configuration JSON generated by Nix Home Manager to OpenCode compatible format
#
# Main features:
# - Automatically converts Nix format MCP configuration to OpenCode format
# - Supports both stdin and file input
# - Error handling and input validation
# - Supports both local commands and remote URL servers
#
# Usage:
#   cat nix-mcp-config.json | opencode-mcp-converter > opencode-mcp-config.json
#   opencode-mcp-converter < nix-mcp-config.json
#   opencode-mcp-converter nix-mcp-config.json
#
# Options:
#   -h, --help     Show help message
#
# Input format (Nix):
#   {
#     "mcpServers": {
#       "serverName": {
#         "command": "path/to/server",
#         "args": ["arg1", "arg2"],
#         "env": {"KEY": "VALUE"}
#       },
#       "remoteServer": {
#         "url": "https://example.com/mcp",
#         "env": {"API_KEY": "secret"}
#       }
#     }
#   }
#
# Output format (OpenCode):
#   {
#     "$schema": "https://opencode.ai/config.json",
#     "mcp": {
#       "serverName": {
#         "type": "local",
#         "command": ["path/to/server", "arg1", "arg2"],
#         "environment": {"KEY": "VALUE"},
#         "enabled": true
#       },
#       "remoteServer": {
#         "type": "remote",
#         "url": "https://example.com/mcp",
#         "environment": {"API_KEY": "secret"},
#         "enabled": true
#       }
#     }
#   }
#
# Conversion rules:
# - `mcpServers` → `mcp`
# - `args` → integrated into `command` array
# - `env` → `environment`
# - `command` only → `type: "local"`
# - contains `url` → `type: "remote"`
# - add `$schema` field
# - add `enabled: true`
#
# Exit codes:
#   0: Success
#   1: Command line error
#   2: Input data is empty
#   3: Invalid JSON format
#   4: Conversion failed
#
# Testing:
#   ./test-converter.sh

set -euo pipefail

# Error message output function
log_error() {
  echo "Error: $1" >&2
}

# Usage display function
show_usage() {
  cat << EOF
Usage: $(basename "$0") [OPTIONS]

OpenCode MCP Configuration Converter Tool - Converts Nix format MCP configuration to OpenCode format

Options:
  -h, --help    Show this help message

Description:
  Reads Nix format MCP configuration JSON from stdin,
  outputs OpenCode compatible format JSON to stdout.

Examples:
  cat nix-mcp-config.json | $0 > opencode-mcp-config.json
  $0 < nix-mcp-config.json

EOF
}

# Main processing function
convert_mcp_config() {
  local input_json="$1"

  # Use jq to convert from Nix format to OpenCode format
  echo "$input_json" | jq '
  if .mcpServers then
    {
      "$schema": "https://opencode.ai/config.json",
      "mcp": .mcpServers | to_entries | map(
        .value |= (
          if .url then
            {
              type: "remote",
              url: .url,
              enabled: true
            } + (if .env then { environment: .env } else {} end)
          else
            {
              type: "local",
              command: ([.command] + (.args // [])),
              enabled: true
            } + (if .env then { environment: .env } else {} end)
          end
        )
      ) | from_entries
    }
  else
    .
  end
  '
}

# Main execution part
main() {
  local input_json

  # Process command line options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        show_usage
        exit 0
        ;;
      *)
        log_error "Unknown option: $1"
        show_usage
        exit 1
        ;;
    esac
    # shellcheck disable=SC2317  # shift and done are intentionally unreachable due to exit in case branches
    shift
  done

  # Read JSON from stdin
  input_json="$(cat --)"

  # Check if input is empty
  if [[ -z "$input_json" ]]; then
    log_error "Input data is empty"
    exit 2
  fi

  # Simple JSON format check
  if ! echo "$input_json" | jq empty 2>/dev/null; then
    log_error "Invalid JSON format"
    exit 3
  fi

  # Execute conversion
  convert_mcp_config "$input_json"
  exit 0
}

# Script execution
main "$@"
